package scripts;
import java.io.IOException;
import org.openqa.selenium.By;
import atu.testng.reports.ATUReports;
import commonMethods.Config;
import commonMethods.Keywords;
import commonMethods.Utils;
public class AMLTransform extends Keywords {
	

	/**
	 * Name : Pavan 
	 * Created Date: 01/Aug/2017
	 *  Modified Date:01/Aug/2017
	 * Description: AML Transformation
	 */
	
	public static void amlTransform() throws IOException {
		refreshPage();
		String encodeInputFile = Utils.getDataFromTestData("amlTransformationEncode", "Input File");
		String encodeColumn1 = Utils.getDataFromTestData("amlTransformationEncode", "Column 1");
		String encodeColumn2 = Utils.getDataFromTestData("amlTransformationEncode", "Column 2");
		String encodeColumn3 = Utils.getDataFromTestData("amlTransformationEncode", "Column 3");
		String encodeColumn4 = Utils.getDataFromTestData("amlTransformationEncode", "Column 4");
		String encodeColumn5 = Utils.getDataFromTestData("amlTransformationEncode", "Column 5");
		String encodeColumn6 = Utils.getDataFromTestData("amlTransformationEncode", "Column 6");
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(encode);
		click(encode);
		waitForElement(inputFile);
		sendKeys(inputFile, encodeInputFile);
		defaultWait();
		tab();
		waitForElement(selectTransposeColumn);
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn1);
		tab();
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn2);
		tab();
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn3);
		tab();
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn4);
		tab();
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn5);
		tab();
		click(selectTransposeColumn);
		waitForElement(columnsTransposed);
		sendKeys(columnsTransposed, encodeColumn6);
		tab();
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(encodeOutputFile);
		getText(encodeOutputFile);
		click(encodeOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		//JOIN
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataJoining);
		click(dataJoining);
		waitForElement(join);
		click(join);
		String joinleftInputFile = Utils.getDataFromTestData("amlTransformationJoin", "Left Input File");
		String joinrightInputFile = Utils.getDataFromTestData("amlTransformationJoin", "Right Input File");
		String joinleftMapping = Utils.getDataFromTestData("amlTransformationJoin", "Left Mapping");
		String joinrightMapping = Utils.getDataFromTestData("amlTransformationJoin", "Right Mapping");
		String encodeRight = Utils.getDataFromTestData("amlTransformationJoin", "Right Encode");
		waitForElement(leftFile);
		sendKeys(leftFile, joinleftInputFile);
		defaultWait();
		tab();
		waitForElement(rightFile);
		sendKeys(rightFile, joinrightInputFile);
		defaultWait();
		tab();
		click(leftColumnMapping);
		waitForElement(leftColumnMappinginput);
		sendKeys(leftColumnMappinginput, joinleftMapping);
		tab();
		click(rightColumnMapping);
		waitForElement(rightColumnMappinginput);
		sendKeys(rightColumnMappinginput, joinrightMapping);
		tab();
		click(typeofJoin);
		click(fullJoin);
		waitForElement(joinleft);
		click(joinleft);
		waitForElement(joinright1);
		click(joinright1);
		sendKeys(enterRightEncode, encodeRight);
		tab();
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(joinOutputFile3);
		getText(joinOutputFile3);
		click(joinOutputFile3);
		defaultWait();
		scrollBottom();
		click(close);
		
		//FILTER
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataCleansing);
		click(dataCleansing);
		waitForElement(filter);
		click(filter);
		String filterInputFile = Utils.getDataFromTestData("amlTransformationFilter", "Input File");
		String predection1 = Utils.getDataFromTestData("amlTransformationFilter", "Predection1");
		String predection2 = Utils.getDataFromTestData("amlTransformationFilter", "Predection2");
		String predection3 = Utils.getDataFromTestData("amlTransformationFilter", "Predection3");
		String predection4 = Utils.getDataFromTestData("amlTransformationFilter", "Predection4");
		String predection5 = Utils.getDataFromTestData("amlTransformationFilter", "Predection5");
		String filterConditionRecord = Utils.getDataFromTestData("amlTransformationFilter", "Filter Data");
		waitForElement(leftFile);
		sendKeys(leftFile, filterInputFile);
		defaultWait();
		tab();
		click(filterColumns);
		defaultWait();
		waitForElement(SelectFilterColumns);
		sendKeys(SelectFilterColumns, filterConditionRecord);
		tab();
		click(filterCondition);
		waitForElement(selectCondition);
		click(selectCondition);
		waitForElement(enterCondition);
		sendKeys(enterCondition, predection1);
		click(columnstoLeft);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(filterOutputFile);
		getText(filterOutputFile);
		click(filterOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataCleansing);
		click(dataCleansing);
		waitForElement(filter);
		click(filter);
		waitForElement(leftFile);
		sendKeys(leftFile, filterInputFile);
		defaultWait();
		tab();
		click(filterColumns);
		waitForElement(SelectFilterColumns);
		sendKeys(SelectFilterColumns, filterConditionRecord);
		tab();
		click(filterCondition);
		waitForElement(selectCondition);
		click(selectCondition);
		waitForElement(enterCondition);
		sendKeys(enterCondition, predection2);
		click(columnstoLeft);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(filterOutputFile);
		getText(filterOutputFile);
		click(filterOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataCleansing);
		click(dataCleansing);
		waitForElement(filter);
		click(filter);
		waitForElement(leftFile);
		sendKeys(leftFile, filterInputFile);
		defaultWait();
		tab();
		click(filterColumns);
		waitForElement(SelectFilterColumns);
		sendKeys(SelectFilterColumns, filterConditionRecord);
		tab();
		click(filterCondition);
		waitForElement(selectCondition);
		click(selectCondition);
		waitForElement(enterCondition);
		sendKeys(enterCondition, predection3);
		click(columnstoLeft);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(filterOutputFile);
		getText(filterOutputFile);
		click(filterOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataCleansing);
		click(dataCleansing);
		waitForElement(filter);
		click(filter);
		waitForElement(leftFile);
		sendKeys(leftFile, filterInputFile);
		defaultWait();
		tab();
		click(filterColumns);
		waitForElement(SelectFilterColumns);
		sendKeys(SelectFilterColumns, filterConditionRecord);
		tab();
		click(filterCondition);
		waitForElement(selectCondition);
		click(selectCondition);
		waitForElement(enterCondition);
		sendKeys(enterCondition, predection4);
		click(columnstoLeft);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(filterOutputFile);
		getText(filterOutputFile);
		click(filterOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataCleansing);
		click(dataCleansing);
		waitForElement(filter);
		click(filter);
		waitForElement(leftFile);
		sendKeys(leftFile, filterInputFile);
		defaultWait();
		tab();
		click(filterColumns);
		waitForElement(SelectFilterColumns);
		sendKeys(SelectFilterColumns, filterConditionRecord);
		tab();
		click(filterCondition);
		waitForElement(selectCondition);
		click(selectCondition);
		waitForElement(enterCondition);
		sendKeys(enterCondition, predection5);
		click(columnstoLeft);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(filterOutputFile);
		getText(filterOutputFile);
		click(filterOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		//Balance_with_Fraction
		String balanceFractionInputFile = Utils.getDataFromTestData("amlTransformationBalancewithFraction", "Input File");
		String className = Utils.getDataFromTestData("amlTransformationBalancewithFraction", "Class Name");
		String dvColumnName = Utils.getDataFromTestData("amlTransformationBalancewithFraction", "Column Name");
		String fraction = Utils.getDataFromTestData("amlTransformationBalancewithFraction", "Fraction");
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(balanceWithFraction);
		click(balanceWithFraction);
		waitForElement(inputFile);
		sendKeys(inputFile, balanceFractionInputFile);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		waitForElement(operation);
		click(operation);
		waitForElement(balanceClass);
		click(balanceClass);
		waitForElement(filterColumns);
		click(filterColumns);
		waitForElement(selectDV);
		sendKeys(selectDV, dvColumnName);
		tab();
		waitForElement(enterClassName);
		sendKeys(enterClassName, className);
		waitForElement(enterFraction);
		sendKeys(enterFraction, fraction);
		waitForElement(samplingType);
		click(samplingType);
		waitForElement(overSampling);
		click(overSampling);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(balanceFractionOutputFile);
		getText(balanceFractionOutputFile);
		click(balanceFractionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		
		refreshPage();
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(balanceWithFraction);
		click(balanceWithFraction);
		waitForElement(inputFile);
		sendKeys(inputFile, balanceFractionInputFile);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		waitForElement(operation);
		click(operation);
		waitForElement(balanceClass);
		click(balanceClass);
		waitForElement(filterColumns);
		click(filterColumns);
		waitForElement(selectDV);
		sendKeys(selectDV, dvColumnName);
		click(selectDV1);
		waitForElement(enterClassName);
		sendKeys(enterClassName, className);
		waitForElement(enterFraction);
		sendKeys(enterFraction, fraction);
		waitForElement(samplingType);
		click(samplingType);
		waitForElement(overSampling);
		click(overSampling);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(balanceFractionOutputFile);
		getText(balanceFractionOutputFile);
		click(balanceFractionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(balanceWithFraction);
		click(balanceWithFraction);
		waitForElement(inputFile);
		sendKeys(inputFile, balanceFractionInputFile);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		waitForElement(operation);
		click(operation);
		waitForElement(balanceClass);
		click(balanceClass);
		waitForElement(filterColumns);
		click(filterColumns);
		waitForElement(selectDV);
		sendKeys(selectDV, dvColumnName);
		tab();
		waitForElement(enterClassName);
		sendKeys(enterClassName, className);
		waitForElement(enterFraction);
		sendKeys(enterFraction, fraction);
		waitForElement(samplingType);
		click(samplingType);
		waitForElement(overSampling);
		click(overSampling);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(balanceFractionOutputFile);
		getText(balanceFractionOutputFile);
		click(balanceFractionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		refreshPage();
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(balanceWithFraction);
		click(balanceWithFraction);
		waitForElement(inputFile);
		sendKeys(inputFile, balanceFractionInputFile);
		defaultWait();
		keyboardArrowDown();
		tab();
		waitForElement(operation);
		click(operation);
		waitForElement(balanceClass);
		click(balanceClass);
		waitForElement(filterColumns);
		click(filterColumns);
		waitForElement(selectDV);
		sendKeys(selectDV, dvColumnName);
		click(selectDV1);
		waitForElement(enterClassName);
		sendKeys(enterClassName, className);
		waitForElement(enterFraction);
		sendKeys(enterFraction, fraction);
		waitForElement(samplingType);
		click(samplingType);
		waitForElement(overSampling);
		click(overSampling);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(balanceFractionOutputFile);
		getText(balanceFractionOutputFile);
		click(balanceFractionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		String nUnionInputFile1 = Utils.getDataFromTestData("amlTransformationN_UNION", "Input File 1");
		String nUnionInputFile2 = Utils.getDataFromTestData("amlTransformationN_UNION", "Input File2");
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataJoining);
		click(dataJoining);
		waitForElement(nUnion);
		click(nUnion);
		waitForElement(inputFile);
		sendKeys(inputFile, nUnionInputFile1);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		click(addFile);
		waitForElement(inputFile1);
		sendKeys(inputFile1, nUnionInputFile1);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		click(addFile);
		waitForElement(inputFile2);
		sendKeys(inputFile2, nUnionInputFile1);
		defaultWait();
		keyboardArrowDown();
		keyboardArrowDown();
		tab();
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(nUnionOutputFile);
		getText(nUnionOutputFile);
		click(nUnionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataJoining);
		click(dataJoining);
		waitForElement(nUnion);
		click(nUnion);
		waitForElement(inputFile);
		sendKeys(inputFile, nUnionInputFile1);
		defaultWait();
		keyboardArrowDown();
		tab();
		click(addFile);
		waitForElement(inputFile1);
		sendKeys(inputFile1, balanceFractionInputFile);
		defaultWait();
		tab();
		click(addFile);
		waitForElement(inputFile2);
		sendKeys(inputFile2, balanceFractionInputFile);
		defaultWait();
		tab();
		click(addFile);
		waitForElement(inputFile3);
		sendKeys(inputFile3, nUnionInputFile1);
		defaultWait();
		tab();
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(nUnionOutputFile);
		getText(nUnionOutputFile);
		click(nUnionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataJoining);
		click(dataJoining);
		waitForElement(nUnion);
		click(nUnion);
		waitForElement(inputFile);
		sendKeys(inputFile, nUnionInputFile2);
		defaultWait();
		keyboardArrowDown();
		tab();
		click(addFile);
		waitForElement(inputFile1);
		sendKeys(inputFile1, nUnionInputFile2);
		defaultWait();
		tab();
		click(addFile);
		waitForElement(inputFile2);
		sendKeys(inputFile2, nUnionInputFile2);
		defaultWait();
		tab();
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(nUnionOutputFile);
		getText(nUnionOutputFile);
		click(nUnionOutputFile);
		defaultWait();
		scrollBottom();
		click(close);
		
		//PROJECT
		click(dashboard);
		waitForElement(transform);
		click(transform);
		waitForElement(dataRestructuring);
		click(dataRestructuring);
		waitForElement(project);
		click(project);
		String projectInputFile = Utils.getDataFromTestData("amlTransformationProject", "Input File");
		waitForElement(inputFile);
		sendKeys(inputFile, projectInputFile);
		defaultWait();
		tab();
		waitForElement(addProjection);
		click(addProjection);
		click(selectType);
		click(typeColumnProjection);
		waitForElement(columnsListProject);
		click(columnsListProject);
		waitForElement(removeListProject);
		click(removeListProject);
		waitForElement(runFunction);
		click(runFunction);
		loadElement();
		waitForElement(projectOutputFile1);
		getText(projectOutputFile1);
		click(projectOutputFile1);
		defaultWait();
		scrollBottom();
		click(close);
	}


}
